from language_interactor import UkrainianLanguageInteractor

ua_lang = UkrainianLanguageInteractor({
    'іменник': {
        'рід': {
            'чоловічий':
                ('хлопець', "потяг", "каменяр"),
            'жіночий':
                ('дівчина', "нехворощ", "любов"),
            'середній':
                ("життя", "почуття", "право", "місто", "місце", "прислів'я", "ягня"),
            'спільний':
                ("ледащо", "сирота", "нероба", "розбишака", "бідолаха", "староста")

        },
        'число': {
            'однина':
                ('хлопець', "дівчина", "життя", "почуття", "право", "місто", "місце", "прислів'я", "потяг", "ледащо",
                 "сирота", "нероба", "нехворощ", "любов"),
            'множина':
                ("потяги", "двері", "штани", "ножиці")
        },
        'відміна': {
            'перша':
                ("дівчина", "ледащо", "сирота", "нероба", "розбишака", "бідолаха", "староста"),
            'друга':
                ("хлопець", "потяг", "життя", "почуття", "право", "місто", "місце", "прислів'я", "каменяр"),
            'третя':
                ("нехворощ", "любов", "мати"),
            'четверта':
                ("ягня",)

        }
    },
    'числівник': {
        'за значенням': {
            "кількісний":
                ("п'ять", "двісті двадцять", "шість", "тридцять три", "сорок вісім"),
            "порядковий":
                ("четвертий", "сьомий", "десятий", "сто двадцять перший")
        }
    },
    'займенник': {
        'за значенням': {
            "власні (особові)":
                ("я", "ти", "він", "вона", "воно"),
            "зворотні":
                ("себе",),
            "питальні":
                ("що?", "хто?", "скільки?", "який?", "чий?" "котрий?"),
            "відносні":
                ("що", "хто", "скільки", "який", "чий" "котрий"),
            "присвійні":
                ("мій", "твій", "наш", "ваш", "його", "її", "їхній", "свій"),
            "вказівні":
                ("цей", "оцей", "сей", "той", "стільки", "такий", "отакий"),
            "означальні": ("весь", "всякий", "сам", "кожний", "самий", "інший"),
            "неозначені": ("абихто", "абищо", "будь-який", "скільки-небудь"),
            "заперечні": ("ніщо", "ніякий", "нічий", "аніхто", "аніщо", "аніякий")
        }
    },
    'дієслово': {
        'вид': {
            "доконаний":
                ("заробив", "перевів", "співають", "бажає"),
            "недоконаний":
                ("заробляв", "переводить", "співали", "бажала"),
        },
        'рід': {
            "чоловічий":
                ("працював",),
            "жіночий":
                ("працювала",),
            "середній":
                ("працювало",)
        },
        'число': {
            'однина':
                ("малював", "малювала", "малювало"),
            'множина':
                ("малювали",),
        },
        'спосіб': {
            'дійсний':
                ("працюю", "сказали", "летить", "прийде"),
            'умовний':
                ("ходила б", "вживав би", "поспішали б"),
            'наказовий':
                ("напишіть", "ходіймо", "хай зайде")
        },
        'час': {
            'минулий':
                ("знаходив", "знаходила", "знаходили", "працював", "працювала", "працювало"),
            'теперішній':
                ("знаходжу", "знаходимо", "знаходите"),
            'майбутній':
                ("знайду", "знайдемо")
        },
    }
})


class PartOfSpeechPresenter:
    error_message = str()

    def print_properties(self, result):
        print('Частина мови — {};'.format(tuple(result.keys())[0]))

        for category_of_property in result.values():
            for property, property_name in category_of_property.items():
                print('{:>10} — {};'.format(property, property_name))

    def print_words_as_examples(self, words, bookmark):
        print('Частина мови — {};'.format(bookmark.get_part_of_speech()))

        print('Слова, що відповідають характеристиці {} — {}:'.format(bookmark.category_name, bookmark.property_name))
        print("\t\t".join(words))

    def print_error(self):
        print(self.error_message)
        self.error_message = ""


presenter = PartOfSpeechPresenter()


class Controller:

    def execute(self):
        command = input()
        try:
            presenter.print_properties(ua_lang.classify(command))
        except (KeyError, ValueError) as msg:
            presenter.error_message += str(msg)
            try:

                presenter.print_words_as_examples(*ua_lang.get_examples(command))
            except (KeyError, ValueError) as msg:
                presenter.error_message += str(msg)
                presenter.print_error()
                # print("".format(msg))


c = Controller()
while True:
    c.execute()
    #input("__")

# додавати нові слова
# presenter.show_properties(ua_lang.characterize("хлопець"))

# while True:
#    command = input("Слово (або команда): ")
#    if command == 'new':
#        print(
#            '"зелений прикметник рід чоловічий" додасть слово "зелений" до частини мови прекметник, та з родом чоловічий')
#        l = input().split()#

#        ua_lang.update({l[1]: {l[2]: {l[3]: (l[0],)}}})

#    res = ua_lang.get_examples(command)
#    if (res) == None:
#        res = ua_lang.classify(command)

#   print(
#       "Помилка: не вдалося знайти {} в словнику. Введіть new, якщо бажаєте додати слово до словника".format(command))№
# TODO word wrap
